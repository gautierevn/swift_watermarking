# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _c_lattices
else:
    import _c_lattices

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _c_lattices.FloatVector_swiginit(self, _c_lattices.new_FloatVector())
    __swig_destroy__ = _c_lattices.delete_FloatVector

    def push_back(self, arg2):
        return _c_lattices.FloatVector_push_back(self, arg2)

    def clear(self):
        return _c_lattices.FloatVector_clear(self)

    def data(self):
        return _c_lattices.FloatVector_data(self)

    def size(self):
        return _c_lattices.FloatVector_size(self)

    def at(self, n):
        return _c_lattices.FloatVector_at(self, n)

    def resize(self, n):
        return _c_lattices.FloatVector_resize(self, n)

# Register FloatVector in _c_lattices:
_c_lattices.FloatVector_swigregister(FloatVector)

class RepeatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _c_lattices.RepeatVector_swiginit(self, _c_lattices.new_RepeatVector())
    __swig_destroy__ = _c_lattices.delete_RepeatVector

    def push_back(self, arg2):
        return _c_lattices.RepeatVector_push_back(self, arg2)

    def clear(self):
        return _c_lattices.RepeatVector_clear(self)

    def data(self):
        return _c_lattices.RepeatVector_data(self)

    def size(self):
        return _c_lattices.RepeatVector_size(self)

    def at(self, n):
        return _c_lattices.RepeatVector_at(self, n)

    def resize(self, n):
        return _c_lattices.RepeatVector_resize(self, n)

# Register RepeatVector in _c_lattices:
_c_lattices.RepeatVector_swigregister(RepeatVector)


def sqr(x):
    return _c_lattices.sqr(x)

def popcount64(x):
    return _c_lattices.popcount64(x)

def sum_of_sq(total, v, n, add=0):
    return _c_lattices.sum_of_sq(total, v, n, add)

def dotprod(n, a, b):
    return _c_lattices.dotprod(n, a, b)
class Comb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tab = property(_c_lattices.Comb_tab_get, _c_lattices.Comb_tab_set)
    nmax = property(_c_lattices.Comb_nmax_get, _c_lattices.Comb_nmax_set)

    def __init__(self, nmax):
        _c_lattices.Comb_swiginit(self, _c_lattices.new_Comb(nmax))

    def __call__(self, n, p):
        return _c_lattices.Comb___call__(self, n, p)
    __swig_destroy__ = _c_lattices.delete_Comb

# Register Comb in _c_lattices:
_c_lattices.Comb_swigregister(Comb)

class Repeat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_c_lattices.Repeat_val_get, _c_lattices.Repeat_val_set)
    n = property(_c_lattices.Repeat_n_get, _c_lattices.Repeat_n_set)

    def __init__(self):
        _c_lattices.Repeat_swiginit(self, _c_lattices.new_Repeat())
    __swig_destroy__ = _c_lattices.delete_Repeat

# Register Repeat in _c_lattices:
_c_lattices.Repeat_swigregister(Repeat)
cvar = _c_lattices.cvar

class Repeats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dim = property(_c_lattices.Repeats_dim_get, _c_lattices.Repeats_dim_set)
    repeats = property(_c_lattices.Repeats_repeats_get, _c_lattices.Repeats_repeats_set)

    def __init__(self, dim=0, c=None):
        _c_lattices.Repeats_swiginit(self, _c_lattices.new_Repeats(dim, c))

    def count(self):
        return _c_lattices.Repeats_count(self)

    def encode(self, c):
        return _c_lattices.Repeats_encode(self, c)

    def decode(self, code, c):
        return _c_lattices.Repeats_decode(self, code, c)
    __swig_destroy__ = _c_lattices.delete_Repeats

# Register Repeats in _c_lattices:
_c_lattices.Repeats_swigregister(Repeats)


def fvec_inner_product(x, y, d):
    return _c_lattices.fvec_inner_product(x, y, d)
class ZnSphereSearch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimS = property(_c_lattices.ZnSphereSearch_dimS_get, _c_lattices.ZnSphereSearch_dimS_set)
    r2 = property(_c_lattices.ZnSphereSearch_r2_get, _c_lattices.ZnSphereSearch_r2_set)
    natom = property(_c_lattices.ZnSphereSearch_natom_get, _c_lattices.ZnSphereSearch_natom_set)
    voc = property(_c_lattices.ZnSphereSearch_voc_get, _c_lattices.ZnSphereSearch_voc_set)

    def __init__(self, dim, r2):
        _c_lattices.ZnSphereSearch_swiginit(self, _c_lattices.new_ZnSphereSearch(dim, r2))

    def search(self, *args):
        return _c_lattices.ZnSphereSearch_search(self, *args)

    def search_multi(self, n, x, c_out, dp_out):
        return _c_lattices.ZnSphereSearch_search_multi(self, n, x, c_out, dp_out)
    __swig_destroy__ = _c_lattices.delete_ZnSphereSearch

# Register ZnSphereSearch in _c_lattices:
_c_lattices.ZnSphereSearch_swigregister(ZnSphereSearch)

class VectorCodec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    nv = property(_c_lattices.VectorCodec_nv_get, _c_lattices.VectorCodec_nv_set)
    dim = property(_c_lattices.VectorCodec_dim_get, _c_lattices.VectorCodec_dim_set)

    def encode(self, x):
        return _c_lattices.VectorCodec_encode(self, x)

    def decode(self, code, c):
        return _c_lattices.VectorCodec_decode(self, code, c)

    def encode_multi(self, nc, c, codes):
        return _c_lattices.VectorCodec_encode_multi(self, nc, c, codes)

    def decode_multi(self, nc, codes, c):
        return _c_lattices.VectorCodec_decode_multi(self, nc, codes, c)

    def find_nn(self, n, codes, nq, xq, idx, dis):
        return _c_lattices.VectorCodec_find_nn(self, n, codes, nq, xq, idx, dis)
    __swig_destroy__ = _c_lattices.delete_VectorCodec

# Register VectorCodec in _c_lattices:
_c_lattices.VectorCodec_swigregister(VectorCodec)

class ZnSphereCodec(ZnSphereSearch, VectorCodec):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    code_segments = property(_c_lattices.ZnSphereCodec_code_segments_get, _c_lattices.ZnSphereCodec_code_segments_set)
    nv = property(_c_lattices.ZnSphereCodec_nv_get, _c_lattices.ZnSphereCodec_nv_set)
    code_size = property(_c_lattices.ZnSphereCodec_code_size_get, _c_lattices.ZnSphereCodec_code_size_set)

    def __init__(self, dim, r2):
        _c_lattices.ZnSphereCodec_swiginit(self, _c_lattices.new_ZnSphereCodec(dim, r2))

    def search_and_encode(self, x):
        return _c_lattices.ZnSphereCodec_search_and_encode(self, x)

    def decode(self, code, c):
        return _c_lattices.ZnSphereCodec_decode(self, code, c)

    def encode(self, x):
        return _c_lattices.ZnSphereCodec_encode(self, x)
    __swig_destroy__ = _c_lattices.delete_ZnSphereCodec

# Register ZnSphereCodec in _c_lattices:
_c_lattices.ZnSphereCodec_swigregister(ZnSphereCodec)

class ZnSphereCodecRec(VectorCodec):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r2 = property(_c_lattices.ZnSphereCodecRec_r2_get, _c_lattices.ZnSphereCodecRec_r2_set)
    log2_dim = property(_c_lattices.ZnSphereCodecRec_log2_dim_get, _c_lattices.ZnSphereCodecRec_log2_dim_set)
    code_size = property(_c_lattices.ZnSphereCodecRec_code_size_get, _c_lattices.ZnSphereCodecRec_code_size_set)

    def __init__(self, dim, r2):
        _c_lattices.ZnSphereCodecRec_swiginit(self, _c_lattices.new_ZnSphereCodecRec(dim, r2))

    def encode_centroid(self, c):
        return _c_lattices.ZnSphereCodecRec_encode_centroid(self, c)

    def decode(self, code, c):
        return _c_lattices.ZnSphereCodecRec_decode(self, code, c)

    def encode(self, x):
        return _c_lattices.ZnSphereCodecRec_encode(self, x)
    all_nv = property(_c_lattices.ZnSphereCodecRec_all_nv_get, _c_lattices.ZnSphereCodecRec_all_nv_set)
    all_nv_cum = property(_c_lattices.ZnSphereCodecRec_all_nv_cum_get, _c_lattices.ZnSphereCodecRec_all_nv_cum_set)
    decode_cache_ld = property(_c_lattices.ZnSphereCodecRec_decode_cache_ld_get, _c_lattices.ZnSphereCodecRec_decode_cache_ld_set)
    decode_cache = property(_c_lattices.ZnSphereCodecRec_decode_cache_get, _c_lattices.ZnSphereCodecRec_decode_cache_set)

    def get_nv(self, ld, r2a):
        return _c_lattices.ZnSphereCodecRec_get_nv(self, ld, r2a)

    def get_nv_cum(self, ld, r2t, r2a):
        return _c_lattices.ZnSphereCodecRec_get_nv_cum(self, ld, r2t, r2a)

    def set_nv_cum(self, ld, r2t, r2a, v):
        return _c_lattices.ZnSphereCodecRec_set_nv_cum(self, ld, r2t, r2a, v)
    __swig_destroy__ = _c_lattices.delete_ZnSphereCodecRec

# Register ZnSphereCodecRec in _c_lattices:
_c_lattices.ZnSphereCodecRec_swigregister(ZnSphereCodecRec)


def dummy_func(arg1, arg2, arg3, arg4, arg5):
    return _c_lattices.dummy_func(arg1, arg2, arg3, arg4, arg5)

def omp_set_num_threads(arg1):
    return _c_lattices.omp_set_num_threads(arg1)

def memcpy(dest, src, n):
    return _c_lattices.memcpy(dest, src, n)

def swig_ptr(a):
    return _c_lattices.swig_ptr(a)


import numpy as np

vector_name_map = {
    'Float': 'float32',
    'Byte': 'uint8',
    'Uint64': 'uint64',
    'Long': 'int64',
    'Int': 'int32',
    'Double': 'float64'
    }

def vector_to_array(v):
    """ convert a C++ vector to a numpy array """
    classname = v.__class__.__name__
    assert classname.endswith('Vector')
    dtype = np.dtype(vector_name_map[classname[:-6]])
    a = np.empty(v.size(), dtype=dtype)
    memcpy(swig_ptr(a), v.data(), a.nbytes)
    return a


def vector_float_to_array(v):
    return vector_to_array(v)


def copy_array_to_vector(a, v):
    """ copy a numpy array to a vector """
    n, = a.shape
    classname = v.__class__.__name__
    assert classname.endswith('Vector')
    dtype = np.dtype(vector_name_map[classname[:-6]])
    assert dtype == a.dtype, (
        'cannot copy a %s array to a %s (should be %s)' % (
            a.dtype, classname, dtype))
    v.resize(n)
    memcpy(v.data(), swig_ptr(a), a.nbytes)




